#include <stdio.h>

struct Process {
  int pid;
  int arrival_time;
  int burst_time;
  int waiting_time;
  int turnaround_time;
};

void FCFS(struct Process proc[], int n) {
  int total_waiting_time = 0;
  int total_turnaround_time = 0;

  proc[0].waiting_time = 0; // First process has no waiting time
  proc[0].turnaround_time = proc[0].burst_time;

  // Calculate waiting time and turnaround time for rest of the processes
  for (int i = 1; i < n; i++) {
    proc[i].waiting_time = proc[i-1].waiting_time + proc[i-1].burst_time;
    proc[i].turnaround_time = proc[i].waiting_time + proc[i].burst_time;
    total_waiting_time += proc[i].waiting_time;
    total_turnaround_time += proc[i].turnaround_time;
  }

  // Print Gantt chart
  printf("Gantt Chart:\n");
  for (int i = 0; i < n; i++) {
    printf("|P%d", proc[i].pid);
  }
  printf("|\n");
  printf("0");
  for (int i = 0; i < n; i++) {
    printf("   %d", proc[i].turnaround_time);
  }
  printf("\n");

  // Print waiting time and turnaround time for each process
  printf("Process\tWaiting Time\tTurnaround Time\n");
  for (int i = 0; i < n; i++) {
    printf("P%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].waiting_time, proc[i].turnaround_time);
  }

  // Print average waiting time and turnaround time
  float avg_waiting_time = (float)total_waiting_time / n;
  float avg_turnaround_time = (float)total_turnaround_time / n;
  printf("Average Waiting Time: %f\n", avg_waiting_time);
  printf("Average Turnaround Time: %f\n", avg_turnaround_time);
}

int main() {
  int n;
  printf("Enter the number of processes: ");
  scanf("%d", &n);
  struct Process proc[n];

  // Input arrival time and burst time for each process
  for (int i = 0; i < n; i++) {
    proc[i].pid = i + 1;
    printf("Enter arrival time and burst time for process P%d: ", proc[i].pid);
    scanf("%d%d", &proc[i].arrival_time, &proc[i].burst_time);
  }

  FCFS(proc, n);

  return 0;
}
