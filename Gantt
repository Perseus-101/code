#include <stdio.h>

struct Process {
  int pid;
  int arrival_time;
  int burst_time;
  int start_time;
  int wait_time;
  int finish_time;
  int turnaround_time;
};

void FCFS(struct Process proc[], int n) {
  int total_waiting_time = 0;
  int total_turnaround_time = 0;

  // First process has no waiting time
  proc[0].start_time = proc[0].arrival_time;
  proc[0].wait_time = 0;
  proc[0].finish_time = proc[0].start_time + proc[0].burst_time;
  proc[0].turnaround_time = proc[0].finish_time - proc[0].arrival_time;

  // Calculate wait time, finish time, and turnaround time for the rest of the processes
  for (int i = 1; i < n; i++) {
    if (proc[i].arrival_time > proc[i-1].finish_time) {
      proc[i].start_time = proc[i].arrival_time;
    } else {
      proc[i].start_time = proc[i-1].finish_time;
    }
    proc[i].wait_time = proc[i].start_time - proc[i].arrival_time;
    proc[i].finish_time = proc[i].start_time + proc[i].burst_time;
    proc[i].turnaround_time = proc[i].finish_time - proc[i].arrival_time;
    total_waiting_time += proc[i].wait_time;
    total_turnaround_time += proc[i].turnaround_time;
  }

  // Print waiting time, finish time, and turnaround time for each process
  printf("Process\tArrival Time\tBurst Time\tStart Time\tWait Time\tFinish Time\tTurnaround Time\n");
  for (int i = 0; i < n; i++) {
    printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
           proc[i].pid, proc[i].arrival_time, proc[i].burst_time,
           proc[i].start_time, proc[i].wait_time, proc[i].finish_time, proc[i].turnaround_time);
  }

  // Print average waiting time and turnaround time
  float avg_waiting_time = (float)total_waiting_time / n;
  float avg_turnaround_time = (float)total_turnaround_time / n;
  printf("Average Waiting Time: %f\n", avg_waiting_time);
  printf("Average Turnaround Time: %f\n", avg_turnaround_time);
}

int main() {
  int n;
  printf("Enter the number of processes: ");
  scanf("%d", &n);
  struct Process proc[n];

  // Input arrival time and burst time for each process
  for (int i = 0

